public class SegmentTree 
{
	private int[] segtree;
    private int maxsize; //size of segtree array
    private int height; 
 
    private  final int STARTINDEX = 0; 
    private  final int ENDINDEX;
    private  final int ROOT = 0; //indicates starting index
    
	public SegmentTree(int length) {
		 height = (int)(Math.ceil(Math.log(length) /  Math.log(2)));
	        maxsize = 2 * (int) Math.pow(2, height) - 1;  //to find the size to an segtree array
	        segtree = new int[maxsize];
	        ENDINDEX = length - 1; 
	}
	public int mid(int start,int end)
	{
		return (start+(end-start)/2); //to find middle index
	}
	public int leftchild(int pos)
	{
		return 2*pos+1; //to find left child 
	}
	public int rightchild(int pos)
	{
		return 2*pos+2; // to find right child
	}
	public int constructSegmentTreeUtil(int[] elements,int start,int end,int current)
	{
		if(start==end)
		{
			segtree[current]=elements[start];
			return segtree[current];
		}
		int mid = mid(start,end);
		segtree[current] = constructSegmentTreeUtil(elements, start, mid, leftchild(current))+
				constructSegmentTreeUtil(elements,mid+1, end, rightchild(current));
		return segtree[current];
	}
	public void constructSegmentTree(int[] elements)
	{
		constructSegmentTreeUtil(elements,STARTINDEX,ENDINDEX,ROOT);
	}
	public void display()
	{
		for(int i=0;i<segtree.length;i++)
		{
			System.out.print(segtree[i]+" ");
		}
	}
	public static void main(String[] args) {
		int elements[] = {1,3,5,7,9,11};
		SegmentTree tree = new SegmentTree(elements.length); 
		tree.constructSegmentTree(elements);
		tree.display();
	}
}
